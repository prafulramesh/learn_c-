
*******************************************************
Short notes of the Balaguruswamy: Important points only
*******************************************************

* << insertion or put to operator. This operator can be used as left shift operator also. This is the very good exmple of Operator Overloading.
* >> extraction or get from operator.
* Commonly using header files:
	<cassert>
	<cctype>
	<cfloat>
	<climit>
	<cmath>
	<cstdio>
	<cstdlib>
	<cstring>
	....
	....

* main()
	In c++, it returns an integer type value to the Operating system.
	So, every main() should be end with return(0).

* Structure of C++ program
	Include Files
	Class declarations
	Member Function definition
	Main function

* Organize program into 3 seperate files:
	i. Class declarations in 1st file
	ii. Member function definitions are in 2nd file
	iii. Main Program -  Which includes previous files.


* Keywords and their meanings:
	$ asm- To embed the assembly language statements.
	$ auto- Storage class for local variable. Visible only in block or function. By default local varibles are of type auto.
	$ catch- Used to describe exception handler code that catches the exception.
	$ const_cast- It is a casting operator used to explicitly override const or volatile objects.
	$ continue- It causes skipping of statements till the end of a loop in which it appear.
	$ delete- It is an operator used to remove objects from memory that were created using new operators.
	$ dynamic_cast- It is casting operator used to cast the type of an object at runtime.
	$ enum- Used to create a user-defined integer data type.
	$ 

* A void pointer cannot be assigned directly to other type pointer. Need to use cast operator.
	eg:
		void *ptr1;
		char *ptr2;
		ptr2 = ptr1; //This is valid in C but not valid in C++
		ptr2 = (char *)ptr1; //This is valid in C++

* Union members can only be manipulated exclusive of each other

* Storage classes:
	i. Automatic: Keyword auto
	ii. External: Keyword extern
	iii. Static: Keyword static
	iv. Register: Keyword Register: used to store value in CPU registers.

* Arrays: Size should be one larger than number of characters in the string.

* Pointers: 
	
	int *ip;	//int pointer
	ip = &x;	//address of x is assigned to ip
	*ip = 10; 	//10 assigned to x through indirection

	char * const ptr1 = "GOOD"; 	// Constant pointer. We cannot modify the address of ptr1.
	int const * ptr2 = &m; 		// Pointer to a constant. The contents of what it point to cannot be changed.
	const char * const cp = "xyz" 	// Both the pointer and the variables as constant.


	

